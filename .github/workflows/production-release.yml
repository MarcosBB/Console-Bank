name: CD - Production Release

on:
  push:
    branches:
      - production

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Baixar codigo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Verificar codigo com flake8
        run: |
          flake8 src/ main.py --max-line-length=120 || true

      - name: Rodar testes
        run: |
          python -m pytest

      - name: Descobrir tag de release
        id: get_version
        run: |
          ULTIMA_TAG_RC=$(git tag --list 'rc-*' | sort -V | tail -n 1)
          
          if [[ -z "$ULTIMA_TAG_RC" ]]; then
            echo "Nenhuma tag 'rc' encontrada. Verificando última tag 'rel'..."
            ULTIMA_TAG_REL=$(git tag --list 'rel-*' | sort -V | tail -n 1)
            
            if [[ -z "$ULTIMA_TAG_REL" ]]; then
              NOVA_TAG="rel-1.0"
            else
              # Incrementar a partir da última tag rel
              VERSAO_ATUAL=$(echo $ULTIMA_TAG_REL | cut -d'-' -f2 | cut -d'.' -f1)
              NOVA_VERSAO=$((VERSAO_ATUAL + 1))
              NOVA_TAG="rel-${NOVA_VERSAO}.0"
            fi
          else
            # Usar versão baseada na tag rc
            VERSAO_PRINCIPAL=$(echo $ULTIMA_TAG_RC | cut -d'-' -f2 | cut -d'.' -f1)
            CANDIDATA="rel-${VERSAO_PRINCIPAL}.0"
            
            # Verificar se a tag candidata já existe
            if git tag -l | grep -q "^$CANDIDATA$"; then
              echo "Tag $CANDIDATA já existe. Incrementando versão..."
              NOVA_VERSAO=$((VERSAO_PRINCIPAL + 1))
              NOVA_TAG="rel-${NOVA_VERSAO}.0"
            else
              NOVA_TAG="$CANDIDATA"
            fi
          fi
          
          echo "Tag de release: $NOVA_TAG"
          echo "tag=$NOVA_TAG" >> $GITHUB_OUTPUT

      - name: Criar tag no git
        run: |
          NOVA_TAG=${{ steps.get_version.outputs.tag }}
          echo "Verificando se a tag $NOVA_TAG já existe..."
          
          if git tag -l | grep -q "^$NOVA_TAG$"; then
            echo "Tag $NOVA_TAG já existe. Pulando criação."
          else
            echo "Criando nova tag: $NOVA_TAG"
            git config --global user.name 'github-actions[bot]'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'
            git tag $NOVA_TAG
            git push origin $NOVA_TAG
            echo "Tag $NOVA_TAG criada com sucesso!"
          fi

      - name: Criar zip do sistema
        run: |
          ZIP_NAME="${{ steps.get_version.outputs.tag }}.zip"
          # Empacotar tudo menos .git e .github
          zip -r $ZIP_NAME . -x ".git/*" ".github/*" "release/*" "*.zip"
          echo "Zip criado: $ZIP_NAME"

      - name: Subir arquivo para download
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get_version.outputs.tag }}
          path: ${{ steps.get_version.outputs.tag }}.zip

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: marcosbb
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build e push da imagem
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            marcosbb/console-bank-api:${{ steps.get_version.outputs.tag }}
            marcosbb/console-bank-api:latest

      - name: Verificar imagem publicada
        run: |
          echo "Imagem publicada com sucesso!"
          echo "Tag: marcosbb/console-bank-api:${{ steps.get_version.outputs.tag }}"
          echo "Tag: marcosbb/console-bank-api:latest"
          echo "Para usar: docker run -p 8080:8080 marcosbb/console-bank-api:${{ steps.get_version.outputs.tag }}"
